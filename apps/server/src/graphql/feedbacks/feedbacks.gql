type Feedback {
    id: String!
    content: String!
    rate: Int!
    user: User!
    userId: String!
    event: Event!
    eventId: String!
    createdAt: DateTime!
}


input CreateFeedbackInput {
    content: String!
    rate: Int!
    eventId: String!
}

input FeedbacksInput {
    take: Int!
    cursor: DateTime
    eventId: String
    rate: Int
}

type FeedbacksResponse {
    data: [Feedback!]!
    total: Int!
    nextCursor: DateTime
    eventId: String
    rate: Int
}

type Mutation {
    createFeedback(input: CreateFeedbackInput!): Feedback! @auth
}

type Query {
    feedbacks(input: FeedbacksInput!): FeedbacksResponse!
    feedback(id: String!): Feedback!
}